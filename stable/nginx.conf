input {
  file {
    type => "nginx_access"
    path => [ "/var/log/nginx/access.log" ]
  }
  file {
    type => "nginx_error"
    path => [ "/var/log/nginx/error.log" ]
  }
}
filter {
  if [type] == "nginx_access" {
    grok {
      match => [
        "message", "%{IPORHOST:clientip}%{SPACE}-%{SPACE}(?:%{USERNAME:username}|-)%{SPACE}\[%{HTTPDATE:timestamp}\]%{SPACE}\"(?:%{WORD:http_verb}%{SPACE}%{NOTSPACE:http_request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:raw_http_request})\"%{SPACE}%{NUMBER:http_status_code}%{SPACE}(?:%{NUMBER:bytes}|-)%{SPACE}%{QS:referrer}%{SPACE}%{QS:agent}%{SPACE}%{QS:forwarded_for}",
        "message", "%{IPORHOST:clientip}%{SPACE}-%{SPACE}(?:%{USERNAME:username}|-)%{SPACE}\[%{HTTPDATE:timestamp}\]%{SPACE}\"(?:%{WORD:http_verb}%{SPACE}%{NOTSPACE:http_request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:raw_http_request})\"%{SPACE}%{NUMBER:http_status_code}%{SPACE}(?:%{NUMBER:bytes}|-)%{SPACE}%{QS:referrer}%{SPACE}%{QS:agent}%{SPACE}",
        "message", "%{HOSTPORT:http_host} %{IPORHOST:clientip} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:http_verb} %{NOTSPACE:http_request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:raw_http_request})\" %{NUMBER:http_status_code} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{NUMBER:time_duration:float} %{NUMBER:time_backend_response:float}",
        "message", "%{HOSTPORT:http_host} %{IPORHOST:clientip} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:http_verb} %{NOTSPACE:http_request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:raw_http_request})\" %{NUMBER:http_status_code} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{NUMBER:time_duration:float}"
      ]
    }
    mutate {
      gsub => [
        "referrer", "\"", "",
        "agent", "\"", "",
        "forwarded_for", "\"", ""
      ]
    }
    date {
      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
    useragent {
      source => "agent"
      target => "agent_fields"
    }
    geoip {
      source => "clientip"
    }
    dns {
      resolve => [ "clientip" ]
    }
  }
  if [type] == "nginx_error" {
    grok {
      match => [
        "message", "(?<timestamp>%{YEAR}/%{MONTHNUM}/%{MONTHDAY}%{SPACE}%{TIME})%{SPACE}\[%{LOGLEVEL:log_level}\]%{SPACE}%{POSINT:pid}#%{NUMBER}:%{SPACE}\*%{NUMBER}%{SPACE}%{GREEDYDATA:message}"
      ]
    }
    date {
      match => [ "timestamp" , "dd/MMM/yyyy HH:mm:ss", "YYYY/MM/dd HH:mm:ss" ]
    }
  }
}
