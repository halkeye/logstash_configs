input {
  file {
    type => "nginx_access"
    path => [ "/var/log/nginx/access.log" ]
  }
  file {
    type => "nginx_error"
    path => [ "/var/log/nginx/error.log" ]
  }
}
filter {
  if [type] == "nginx_access" {
    grok {
      match => [
        "message", "%{IPORHOST:client_ip} - (?:%{USERNAME:username}|-) \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:http_verb} %{NOTSPACE:http_request}(?: HTTP/%{NUMBER:http_version})?|%{DATA:raw_http_request})\" %{NUMBER:http_status_code} (?:%{NUMBER:bytes_read}|-) %{QS:referrer} %{QS:agent} %{QS:forwarded_for}",
        "message", "%{HOSTPORT:http_host} %{IPORHOST:client_ip} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:http_verb} %{NOTSPACE:http_request}(?: HTTP/%{NUMBER:http_version})?|%{DATA:raw_http_request})\" %{NUMBER:http_status_code} (?:%{NUMBER:bytes_read}|-) %{QS:referrer} %{QS:agent} %{NUMBER:time_duration:float} %{NUMBER:time_backend_response:float}",
        "message", "%{HOSTPORT:http_host} %{IPORHOST:client_ip} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:http_verb} %{NOTSPACE:http_request}(?: HTTP/%{NUMBER:http_version})?|%{DATA:raw_http_request})\" %{NUMBER:http_status_code} (?:%{NUMBER:bytes_read}|-) %{QS:referrer} %{QS:agent} %{NUMBER:time_duration:float}"
      ]
    }
    date {
      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
    useragent {
      source => "agent"
      target => "agent_fields"
    }
    geoip {
      source => "client_ip"
    }
    dns {
      resolve => [ "client_ip" ]
    }
  }
}
